{"type":"data","nodes":[null,{"type":"data","data":[{"sections":1},[2,7,12,17,22],{"meta":3,"slug":5,"body":6},{"title":4},"SVG Support","01-svg-support","svg2png-wasm uses [resvg](https://crates.io/crates/resvg) for SVG conversion.\n\nSo, please check [resvg document](https://crates.io/crates/resvg#svg-support) for SVG support status.\n",{"meta":8,"slug":10,"body":11},{"title":9},"Getting Started","02-getting-started","You can use this library in Node.js, Deno and Browser.\n\n### Node.js\n\n```\nnpm install svg2png-wasm\n# yarn add svg2png-wasm\n# pnpm add svg2png-wasm\n```\n\n### Deno\n\n```js\n// Skypack\nexport * from 'https://cdn.skypack.dev/svg2png-wasm?dts';\n// or\n// esm.sh\nexport * from 'https://esm.sh/svg2png-wasm';\n```\n\n### Browser\n\nYou can use npm (like Node.js) to bundle it with bundler (Webpack, Vite, etc.).\n\nIt can also be used directly as follows.\n\n```html\n\u003Cscript src=\"https://unpkg.com/svg2png-wasm\">\u003C/script>\n```\n\n```js\nconst { initialize, svg2png, createSvg2png } = svg2pngWasm;\n```\n",{"meta":13,"slug":15,"body":16},{"title":14},"Basic Usage","03-basic-usage","### 1. Prepare wasm\n\nYou will need to prepare a wasm module.\n\ne.g.\n\n```js\n// Node.js\nimport { readFileSync } from 'fs';\nconst wasm = readFileSync('./node_modules/svg2png-wasm/svg2png_wasm_bg.wasm');\n```\n\n```js\n// Deno (For example, fetch from unpkg CDN)\nconst wasm = await fetch(\n  'https://unpkg.com/svg2png-wasm/svg2png_wasm_bg.wasm',\n).then((res) => res.arrayBuffer());\n```\n\n```js\n// browser (For example, we have a wasm file in the assets directory)\nconst wasm = await fetch('/assets/svg2png_wasm_bg.wasm').then((res) =>\n  res.arrayBuffer(),\n);\n```\n\n### 2. Initialize wasm\n\n```js\nimport { initialize } from 'svg2png-wasm';\nawait initialize(wasm);\n```\n\n### 3. Convert SVG\n\n```js\nimport { svg2png } from 'svg2png-wasm';\nconst png = await svg2png(svg);\n```\n",{"meta":18,"slug":20,"body":21},{"title":19},"Font Settings","04-font-settings","> If you want to use text in SVG, you need to check this section.\n\nWebAssembly is run in a sandbox for safety reasons. Therefore, WebAssembly does not have access to system information, for example, it cannot use the system fonts.\n\nFor this reason, you must pass the fonts when you want to use text in SVG.\n\nThe first entry in the `fonts` field array will be the fallback font.\n\nThe `defaultFontFamily` field is used when the font is specified as `sans-serif`, `serif` etc.\n\n### Example\n\n```js\nimport { svg2png, createSvg2png } from 'svg2png-wasm';\n\n// Prepare font data\nconst robotoFont = await fetch('/assets/Roboto.ttf').then((res) =>\n  res.arrayBuffer(),\n);\n\n// convert directly\nconst png = await svg2png(svg, {\n  fonts: [new Uint8Array(robotoFont)],\n  defaultFontFamily: { sansSerifFamily: 'Roboto' },\n  scale: 2,\n});\n\n// OR\n// create font loaded svg2png\nconst fontLoadedSvg2png = createSvg2png({\n  fonts: [new Uint8Array(robotoFont)],\n  defaultFontFamily: { sansSerifFamily: 'Roboto' },\n});\n// convert\nconst png = await fontLoadedSvg2png(svg, { scale: 2 });\n```\n",{"meta":23,"slug":25,"body":26},{"title":24},"Advanced usage","05-advanced-usage","## Initialize only once\n\nThe `initialize` function can be called only once.\n\nIf it is called more than once, `Promise` will be rejected.\n\n## Initialize without buffer\n\nThe argument of the `initialize` function can be something other than a buffer.\n\n### Types\n\n```js\nexport type InitInput =\n  | RequestInfo\n  | URL\n  | Response\n  | BufferSource\n  | WebAssembly.Module;\nexport const initialize: (mod: Promise\u003CInitInput> | InitInput) => Promise\u003Cvoid>;\n```\n\n### Examples\n\n```js\n// full code (WebAsembly.Module)\nconst response = await fetch(\n  'https://unpkg.com/svg2png-wasm/svg2png_wasm_bg.wasm',\n);\nconst buffer = await response.arrayBuffer();\nconst { module } = await WebAssembly.instantiate(buffer);\nawait initialize(module);\n\n// BufferSource\nconst response = await fetch(\n  'https://unpkg.com/svg2png-wasm/svg2png_wasm_bg.wasm',\n);\nconst buffer = await response.arrayBuffer();\nawait initialize(buffer);\n\n// Response\nconst response = await fetch(\n  'https://unpkg.com/svg2png-wasm/svg2png_wasm_bg.wasm',\n);\nawait initialize(response);\n\n// Promise\u003CResponse>\nawait initialize(fetch('https://unpkg.com/svg2png-wasm/svg2png_wasm_bg.wasm'));\n\n// in Deno (Promise\u003CBufferSource>)\nawait initialize(Deno.readFile('./svg2png_wasm_bg.wasm'));\n\n// in Deno and Browser (RequestInfo (=string/URL))\nawait initialize('https://unpkg.com/svg2png-wasm/svg2png_wasm_bg.wasm');\n```\n\n## Convert options\n\nThe output image can be adjusted by specifying an option as the second argument of the function `svg2png`.\n\n### Size option\n\nYou can specify output image size.\n\nSpecifying the width and height will not stretch the image.\n\n```js\n// 2x scale\nawait svg2png(svgData, { scale: 2 });\n\n// Fit to 500px width\nawait svg2png(svgData, { width: 500 });\n\n// Fit to 128px height\nawait svg2png(svgData, { height: 128 });\n\n// Fit to 300px width (width and height have priority)\nawait svg2png(svgData, { width: 300, scale: 10 });\n```\n\n### Background color option\n\nYou can specify background color of the output image when the SVG is transparent.\n\n```js\n// Compatible with CSS Color Module 3\n// with color keyword\nawait svg2png(svgData, { backgroundColor: 'lightskyblue' });\n\n// with hex values\nawait svg2png(svgData, { backgroundColor: '#3cf' });\n\n// with hsla\nawait svg2png(svgData, { backgroundColor: 'hsla(240, 100%, 50%, 0.5)' });\n```\n\n## Custom svg2png\n\nYou can create a custom svg2png function.\n\nBasically, you can use `svg2png` , but if you want to process a lot of data continuously, consider using `createSvg2png` . It can reduce the overhead of font loading. Converters generated by `createSvg2png` should be disposed of after use by calling the dispose method.\n\n```js\nconst svgs = [\n  '\u003Csvg viewBox=\"0 0 200 200\" xmlns=\"http://www.w3.org/2000/svg\"> ... \u003C/svg>',\n  '\u003Csvg viewBox=\"0 0 200 200\" xmlns=\"http://www.w3.org/2000/svg\"> ... \u003C/svg>',\n  '\u003Csvg viewBox=\"0 0 200 200\" xmlns=\"http://www.w3.org/2000/svg\"> ... \u003C/svg>',\n  // and more ...\n];\nconst font = await fetch('./Roboto.ttf').then((res) => res.arrayBuffer());\nconst svg2png = createSvg2png({\n  fonts: [new Uint8Array(font)],\n});\n\nconst pngs = await Promise.all(svgs.map((svg) => svg2png(svg, { scale: 2 })));\nsvg2png.dispose(); // You should dispose svg2png, if you will not use it in the future\n```\n"],"uses":{}}]}
